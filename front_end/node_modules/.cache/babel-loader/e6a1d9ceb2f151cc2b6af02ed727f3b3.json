{"ast":null,"code":"var _jsxFileName = \"/home/karthikeya/Desktop/cs387/project/front_end/src/Stats/Stats_info.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport makeAnimated from \"react-select/animated\";\nimport { default as ReactSelect } from \"react-select\";\nimport { DateRangePicker } from 'react-date-range';\nimport { components } from \"react-select\";\nimport { Button } from 'react-bootstrap';\nimport { BrowserRouter as Router, Routes, Route, Link, useParams } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Chart as ChartJS } from 'chart.js/auto';\nimport { Line } from \"react-chartjs-2\";\nimport Country_info from \"../Country/Country_info\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colourOptions = [{\n  value: \"India\",\n  label: \"India\"\n}, {\n  value: \"China\",\n  label: \"China\"\n}, {\n  value: \"Russia\",\n  label: \"Russia\"\n}, {\n  value: \"Australia\",\n  label: \"Australia\"\n}, {\n  value: \"Canada\",\n  label: \"Canada\"\n}];\nconst statOptions = [{\n  value: \"deaths\",\n  label: \"Deaths\"\n}, {\n  value: \"active_cases\",\n  label: \"Active cases\"\n}, {\n  value: \"cumulative_cases\",\n  label: \"All_so_far\"\n}];\nconst varOptions = [];\n\nconst Option = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(components.Option, { ...props,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: props.isSelected,\n        onChange: () => null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Option;\n\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\n\nconst totalDuration = 1000;\nconst delayBetweenPoints = totalDuration / 5;\n\nconst previousY = ctx => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;\n\nconst animation = {\n  x: {\n    type: 'number',\n    easing: 'linear',\n    duration: delayBetweenPoints,\n    from: NaN,\n\n    // the point is initially skipped\n    delay(ctx) {\n      if (ctx.type !== 'data' || ctx.xStarted) {\n        return 0;\n      }\n\n      ctx.xStarted = true;\n      return ctx.index * delayBetweenPoints;\n    }\n\n  },\n  y: {\n    type: 'number',\n    easing: 'linear',\n    duration: delayBetweenPoints,\n    from: previousY,\n\n    delay(ctx) {\n      if (ctx.type !== 'data' || ctx.yStarted) {\n        return 0;\n      }\n\n      ctx.yStarted = true;\n      return ctx.index * delayBetweenPoints;\n    }\n\n  }\n};\n\nclass Stats_info extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = selected => {\n      this.setState({\n        Country_Selected: selected\n      });\n    };\n\n    this.handleChange2 = selected => {\n      this.setState({\n        Stat_options: selected\n      });\n    };\n\n    this.state = {\n      name: \"India\",\n      Country_Selected: [],\n      Stat_options: [],\n      all_req: false,\n      date_range: [],\n      sample_data: [],\n      graph_data: null,\n      scount: 0,\n      startDate: [],\n      endDate: []\n    };\n    this.get_data = this.get_data.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.display_graph = this.display_graph.bind(this);\n  }\n\n  handleSelect(date) {\n    if (this.state.scount == 0) {\n      this.setState({\n        startDate: date,\n        scount: 1\n      });\n    } else {\n      this.setState({\n        endDate: date,\n        scount: 0\n      });\n    }\n\n    console.log(date);\n  }\n\n  get_data() {\n    this.setState({\n      all_req: false\n    });\n    const mygraph_data = {\n      labels: [],\n      datasets: []\n    };\n    let p = Object.values(this.state.startDate)[0];\n    let p2 = JSON.stringify(p.startDate);\n    p = Object.values(this.state.endDate)[0];\n    let p3 = JSON.stringify(p.startDate);\n    var c1 = \"Russia\",\n        c2 = \"India\";\n    const countries = this.state.Country_Selected;\n    var url = 'http://10.42.0.51:8000/country/';\n\n    for (var i = 0; i < countries.length; i++) {\n      url = url + countries[i].value + ',';\n    }\n\n    url = url + '/type/new_cases/variant/alpha/start/' + p2 + '/end/' + p3;\n    console.log(p2, p3); //        var url = 'http://10.42.0.51:8000/country/' + c1 + ',' +c2 + '/type/new_cases/variant/alpha/start/'+p2+ '/end/' + p3 ;\n    // url = url.concat([c1,c2,'/type/new_cases/variant/alpha/start/',p2,'/end/',p3]);\n\n    var cols = [\"red\", \"green\", \"blue\", \"violet\", \"indigo\", \"yellow\", \"orange\"];\n    fetch(url).then(Response => Response.json()).then(json => {\n      const tp = JSON.parse(json);\n      const n_c = Object.keys(tp).length;\n      var mylabels = [];\n      console.log(\"No of days \", tp[countries[0].value].length);\n\n      for (var i = 0; i < tp[countries[0].value].length; i++) mylabels[i] = \"\";\n\n      mygraph_data.labels = mylabels;\n\n      for (var i = 0; i < n_c; i++) {\n        mygraph_data.datasets[i] = {\n          label: countries[i].value,\n          data: tp[countries[i].value],\n          backgroundColor: \"rgba(\" + i + \",192,192,0.2)\",\n          borderColor: cols[i % 7]\n        };\n      }\n\n      this.setState({\n        graph_data: mygraph_data,\n        all_req: true\n      });\n    });\n  }\n\n  display_graph() {\n    var tp = false;\n    if (!this.state.all_req) return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: \"Waiting for data\"\n    }, void 0, false);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Got all the data to display graph  and \", this.state.graph_data.datasets.length, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: this.state.graph_data,\n        options: {\n          animations: animation\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n  componentDidMount() {// do nothing as of now \n  }\n\n  render() {\n    const selectionRange = {\n      startDate: new Date(),\n      endDate: new Date(),\n      key: 'selection'\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(this.display_graph, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Stats page \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.get_data,\n        children: \" Get the data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select Countries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"d-inline-block\",\n        \"data-toggle\": \"popover\",\n        \"data-trigger\": \"focus\",\n        \"data-content\": \"Please selecet account(s)\",\n        children: /*#__PURE__*/_jsxDEV(ReactSelect, {\n          options: colourOptions,\n          isMulti: true,\n          closeMenuOnSelect: false,\n          hideSelectedOptions: false,\n          components: {\n            Option\n          },\n          onChange: this.handleChange,\n          allowSelectAll: true,\n          value: this.state.optionSelected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select Statistic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"d-inline-block\",\n        \"data-toggle\": \"popover\",\n        \"data-trigger\": \"focus\",\n        \"data-content\": \"Please selecet account(s)\",\n        children: /*#__PURE__*/_jsxDEV(ReactSelect, {\n          options: statOptions,\n          closeMenuOnSelect: false,\n          hideSelectedOptions: false,\n          components: {\n            Option\n          },\n          onChange: this.handleChange2,\n          value: this.state.Stat_options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Select the date range \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DateRangePicker, {\n        ranges: [selectionRange],\n        onChange: this.handleSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default _s(props => {\n  _s();\n\n  return /*#__PURE__*/_jsxDEV(Stats_info, { ...props,\n    params: useParams()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 5\n  }, this);\n}, \"zmUErVVHtqqM6DIDQ9M8H17P2nM=\", false, function () {\n  return [useParams];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"Option\");","map":{"version":3,"sources":["/home/karthikeya/Desktop/cs387/project/front_end/src/Stats/Stats_info.js"],"names":["React","makeAnimated","default","ReactSelect","DateRangePicker","components","Button","BrowserRouter","Router","Routes","Route","Link","useParams","Chart","ChartJS","Line","Country_info","colourOptions","value","label","statOptions","varOptions","Option","props","isSelected","_MS_PER_DAY","totalDuration","delayBetweenPoints","previousY","ctx","index","chart","scales","y","getPixelForValue","getDatasetMeta","datasetIndex","data","getProps","animation","x","type","easing","duration","from","NaN","delay","xStarted","yStarted","Stats_info","Component","constructor","handleChange","selected","setState","Country_Selected","handleChange2","Stat_options","state","name","all_req","date_range","sample_data","graph_data","scount","startDate","endDate","get_data","bind","handleSelect","display_graph","date","console","log","mygraph_data","labels","datasets","p","Object","values","p2","JSON","stringify","p3","c1","c2","countries","url","i","length","cols","fetch","then","Response","json","tp","parse","n_c","keys","mylabels","backgroundColor","borderColor","animations","componentDidMount","render","selectionRange","Date","key","optionSelected"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport makeAnimated from \"react-select/animated\";\nimport { default as ReactSelect } from \"react-select\";\nimport { DateRangePicker } from 'react-date-range';\nimport { components } from \"react-select\";\nimport {Button} from 'react-bootstrap';\nimport {\n    BrowserRouter as Router ,\n    Routes,\n    Route,\n    Link,\n    useParams\n  \n  } from 'react-router-dom' ;\n\n  import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Chart as ChartJS } from 'chart.js/auto'\nimport { Line } from \"react-chartjs-2\";\n\nimport Country_info from \"../Country/Country_info\";\n\n\n  const colourOptions = [\n    { value: \"India\", label: \"India\" },\n    { value: \"China\", label: \"China\" },\n    { value: \"Russia\", label: \"Russia\" },\n    { value: \"Australia\", label: \"Australia\"},\n    { value: \"Canada\", label: \"Canada\"}\n  ];\n\n  const statOptions = [\n    { value : \"deaths\" , label : \"Deaths\" },\n    { value : \"active_cases\", label : \"Active cases\"},\n    { value : \"cumulative_cases\", label : \"All_so_far\"}\n    \n\n    \n\n  ]\n\n  const varOptions = [\n\n    \n  ]\n\n  const Option = (props) => {\n    return (\n      <div>\n        <components.Option {...props}>\n          <input\n            type=\"checkbox\"\n            checked={props.isSelected}\n            onChange={() => null}\n          />{\" \"}\n          <label>{props.label}</label>\n        </components.Option>\n      </div>\n    );\n  };\n\n  const _MS_PER_DAY = 1000 * 60 * 60 * 24;\n  const totalDuration = 1000;\n  const delayBetweenPoints = totalDuration / 5;\n  const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;\n  const animation = {\n    x: {\n      type: 'number',\n      easing: 'linear',\n      duration: delayBetweenPoints,\n      from: NaN, // the point is initially skipped\n      delay(ctx) {\n        if (ctx.type !== 'data' || ctx.xStarted) {\n          return 0;\n        }\n        ctx.xStarted = true;\n        return ctx.index * delayBetweenPoints;\n      }\n    },\n    y: {\n      type: 'number',\n      easing: 'linear',\n      duration: delayBetweenPoints,\n      from: previousY,\n      delay(ctx) {\n        if (ctx.type !== 'data' || ctx.yStarted) {\n          return 0;\n        }\n        ctx.yStarted = true;\n        return ctx.index * delayBetweenPoints;\n      }\n    }\n  };\n\nclass Stats_info extends React.Component{\n\n    constructor(props){\n\n        super(props); \n\n        this.state = {\n            name : \"India\",\n            Country_Selected: [],\n            Stat_options : [],\n            all_req : false,\n            date_range : [],\n            sample_data : [] ,\n            graph_data : null ,\n            scount : 0 ,\n            startDate : [],\n            endDate :[] \n\n        }\n        \n\n        \n       \n        \n\n        this.get_data = this.get_data.bind(this) ;\n        this.handleChange = this.handleChange.bind(this) ;\n        this.handleChange2 = this.handleChange2.bind(this) ;\n        this.handleSelect = this.handleSelect.bind(this) ;\n\n        this.display_graph = this.display_graph.bind(this) ;\n\n    }\n\n    handleChange = selected => {\n        this.setState({\n          Country_Selected: selected\n        });\n\n       \n\n        \n\n      };\n\n    handleChange2 = selected => {\n      this.setState({\n\n        Stat_options : selected\n\n\n      })\n     \n      \n    }\n    \n\n    handleSelect(date){\n     \n      if(this.state.scount == 0){\n\n        this.setState({\n          startDate : date ,\n          scount : 1 \n        })\n\n\n      }\n      else{\n        this.setState({\n          endDate : date,\n          scount : 0  \n\n        })\n\n      }\n      \n\n      console.log(date) ;\n    \n    \n  }\n\n\n    get_data(){\n\n      this.setState({\n        all_req : false \n      })\n\n      \n      \n     \n      \n      const mygraph_data = {\n        labels: [],\n        datasets: []\n      };\n   \n\n      let p = Object.values(this.state.startDate)[0];\n      \n        let p2 = JSON.stringify(p.startDate);\n\n         p = Object.values(this.state.endDate)[0];\n        let p3 = JSON.stringify(p.startDate);\n        var c1 = \"Russia\" , c2 = \"India\" ;\n\n        const countries = this.state.Country_Selected ;\n        var url = 'http://10.42.0.51:8000/country/' ;\n\n        for(var i =0 ;i <countries.length;i++){\n          url = url +  countries[i].value + ','\n        }\n        url = url + '/type/new_cases/variant/alpha/start/'+p2+ '/end/' + p3 ;\n        \n        console.log(p2,p3) ;\n\n//        var url = 'http://10.42.0.51:8000/country/' + c1 + ',' +c2 + '/type/new_cases/variant/alpha/start/'+p2+ '/end/' + p3 ;\n       // url = url.concat([c1,c2,'/type/new_cases/variant/alpha/start/',p2,'/end/',p3]);\n       var  cols = [\"red\",\"green\",\"blue\",\"violet\",\"indigo\",\"yellow\",\"orange\"];\n        fetch(url)\n        .then((Response) => Response.json())\n        .then((json) => {\n\n            const tp  = JSON.parse(json);\n           \n            \n            const n_c = Object.keys(tp).length ;\n            var mylabels = [];\n            console.log(\"No of days \",tp[countries[0].value].length);\n            for(var i =0;i<tp[countries[0].value].length;i++) mylabels[i] = \"\";\n\n               mygraph_data.labels = mylabels;\n               \n            for(var i =0;i<n_c;i++){\n\n              \n              \n\n            \n              mygraph_data.datasets[i] = {\n                label : countries[i].value ,\n                data : tp[countries[i].value]  ,\n                backgroundColor: \"rgba(\" + i+\",192,192,0.2)\",\n                borderColor: cols[i%7]\n              }\n\n            }\n\n            this.setState({\n              graph_data : mygraph_data,\n              all_req : true \n            })\n            \n        })\n        \n\n      \n\n      \n\n\n\n\n    }\n\n    display_graph(){\n\n      var tp = false;\n\n      if( !this.state.all_req)  return(<>Waiting for data</>);\n      \n      \n\n      \n      \n      \n      return(\n\n        <>\n        \n\n          <p>Got all the data to display graph  and {this.state.graph_data.datasets.length} </p>\n\n          \n          <Line \n          \n            data = {this.state.graph_data}\n\n            options = {{\n        \n              animations: animation\n              \n              \n            }}\n          />\n          \n        \n        </>\n\n      )\n\n    }\n\n    componentDidMount(){\n\n        // do nothing as of now \n\n    }\n\n    render(){\n      const selectionRange = {\n        startDate: new Date(),\n        endDate: new Date(),\n        key: 'selection',\n      }\n\n        return(\n\n            <>\n            \n              {< this.display_graph />} \n            \n                <h1> Stats page </h1>\n\n\n                <Button onClick={this.get_data} > Get the data</Button>\n                <p>Select Countries</p>\n                <span\n        className=\"d-inline-block\"\n        data-toggle=\"popover\"\n        data-trigger=\"focus\"\n        data-content=\"Please selecet account(s)\"\n      >\n        <ReactSelect\n          options={colourOptions}\n          isMulti\n          closeMenuOnSelect={false}\n          hideSelectedOptions={false}\n          components={{\n            Option\n          }}\n          onChange={this.handleChange}\n          allowSelectAll={true}\n          value={this.state.optionSelected}\n        />\n      </span>\n\n          <br></br>\n          <p>Select Statistic</p>\n      <span\n        className=\"d-inline-block\"\n        data-toggle=\"popover\"\n        data-trigger=\"focus\"\n        data-content=\"Please selecet account(s)\"\n      >\n        <ReactSelect\n          options={statOptions}\n         \n          closeMenuOnSelect={false}\n          hideSelectedOptions={false}\n          components={{\n            Option\n          }}\n          onChange={this.handleChange2}\n        \n          value={this.state.Stat_options}\n        />\n      </span>\n\n      <p> Select the date range </p>\n      <DateRangePicker\n        ranges={[selectionRange]}\n        onChange={this.handleSelect}\n      />\n            \n            \n            \n            </>\n\n\n\n\n\n        )\n    }\n\n}\n\n\n\nexport default (props) => (\n    <Stats_info\n        {...props}\n        params={useParams()}\n    />\n);"]},"metadata":{},"sourceType":"module"}