{"ast":null,"code":"import React, { useState, createRef } from \"react\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport geoData from \"./countries.geo\";\nimport { defaultColor, defaultSize, heightRatio, defaultCountryStyle, defaultTooltip } from \"./constants\";\nimport { useWindowWidth, responsify } from \"./utils\";\nimport { drawTooltip } from \"./draw\";\nimport Frame from \"./components/Frame\";\nimport Region from \"./components/Region\";\nimport TextLabel from \"./components/TextLabel\";\nexport default function WorldMap(props) {\n  const {\n    data,\n    title,\n    valuePrefix = \"\",\n    valueSuffix = \"\",\n    color = defaultColor,\n    strokeOpacity = 0.2,\n    backgroundColor = \"white\",\n    tooltipBgColor = \"black\",\n    tooltipTextColor = \"white\",\n    size = defaultSize,\n    frame = false,\n    frameColor = \"black\",\n    borderColor = \"black\",\n    richInteraction = false,\n    styleFunction = defaultCountryStyle(borderColor, strokeOpacity),\n    tooltipTextFunction = defaultTooltip,\n    onClickFunction,\n    hrefFunction,\n    textLabelFunction = () => []\n  } = props;\n  const windowWidth = useWindowWidth();\n  const width = typeof size === \"number\" ? size : responsify(size, windowWidth);\n  const height = width * heightRatio;\n  const [scale, setScale] = useState(1);\n  const [translateX, setTranslateX] = useState(0);\n  const [translateY, setTranslateY] = useState(0);\n  const containerRef = createRef();\n  const countryValueMap = Object.fromEntries(data.map(_ref => {\n    let {\n      country,\n      value\n    } = _ref;\n    return [country.toUpperCase(), value];\n  }));\n  const minValue = Math.min(...data.map(_ref2 => {\n    let {\n      value\n    } = _ref2;\n    return value;\n  }));\n  const maxValue = Math.max(...data.map(_ref3 => {\n    let {\n      value\n    } = _ref3;\n    return value;\n  }));\n  const projection = geoMercator();\n  const pathGenerator = geoPath().projection(projection);\n  const onClick = React.useCallback(context => event => onClickFunction === null || onClickFunction === void 0 ? void 0 : onClickFunction(Object.assign(Object.assign({}, context), {\n    event\n  })), [onClickFunction]);\n  const regions = geoData.features.map(feature => {\n    const triggerRef = createRef();\n    const {\n      I: isoCode,\n      N: countryName,\n      C: coordinates\n    } = feature;\n    const geoFeature = {\n      type: \"Feature\",\n      properties: {\n        NAME: countryName,\n        ISO_A2: isoCode\n      },\n      geometry: {\n        type: \"MultiPolygon\",\n        coordinates: coordinates\n      }\n    };\n    const context = {\n      countryCode: isoCode,\n      countryValue: countryValueMap[isoCode],\n      countryName,\n      color,\n      minValue,\n      maxValue,\n      prefix: valuePrefix,\n      suffix: valueSuffix\n    };\n    const path = React.createElement(Region, {\n      ref: triggerRef,\n      d: pathGenerator(geoFeature),\n      style: styleFunction(context),\n      onClick: onClick(context),\n      strokeOpacity: strokeOpacity,\n      href: hrefFunction === null || hrefFunction === void 0 ? void 0 : hrefFunction(context),\n      key: countryName\n    });\n    const tooltip = drawTooltip(typeof context.countryValue === \"undefined\" ? undefined : tooltipTextFunction(context), tooltipBgColor, tooltipTextColor, triggerRef, containerRef);\n    return {\n      path,\n      highlightedTooltip: tooltip\n    };\n  });\n  const regionPaths = regions.map(entry => entry.path);\n  const regionTooltips = regions.map(entry => entry.highlightedTooltip);\n  const eventHandlers = {\n    onMouseDown(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n\n    onDoubleClick(e) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const y = e.clientY - rect.top;\n\n      if (scale === 4) {\n        setTranslateX(0);\n        setTranslateY(0);\n        setScale(1);\n      } else {\n        setTranslateX(2 * translateX - x);\n        setTranslateY(2 * translateY - y);\n        setScale(scale * 2);\n      }\n    }\n\n  };\n  return React.createElement(\"figure\", {\n    className: \"worldmap__figure-container\",\n    style: {\n      backgroundColor\n    }\n  }, title && React.createElement(\"figcaption\", {\n    className: \"worldmap__figure-caption\"\n  }, title), React.createElement(\"svg\", Object.assign({\n    ref: containerRef,\n    height: `${height}px`,\n    width: `${width}px`\n  }, richInteraction ? eventHandlers : undefined), frame && React.createElement(Frame, {\n    color: frameColor\n  }), React.createElement(\"g\", {\n    transform: `translate(${translateX}, ${translateY}) scale(${width / 960 * scale}) translate(0, 240)`,\n    style: {\n      transition: \"all 0.2s\"\n    }\n  }, regionPaths), React.createElement(\"g\", null, textLabelFunction(width).map(labelProps => React.createElement(TextLabel, Object.assign({}, labelProps, {\n    key: labelProps.label\n  })))), regionTooltips));\n}\nexport { WorldMap };","map":{"version":3,"sources":["/home/karthikeya/Desktop/cs387/project/front_end/node_modules/react-svg-worldmap/dist/index.js"],"names":["React","useState","createRef","geoMercator","geoPath","geoData","defaultColor","defaultSize","heightRatio","defaultCountryStyle","defaultTooltip","useWindowWidth","responsify","drawTooltip","Frame","Region","TextLabel","WorldMap","props","data","title","valuePrefix","valueSuffix","color","strokeOpacity","backgroundColor","tooltipBgColor","tooltipTextColor","size","frame","frameColor","borderColor","richInteraction","styleFunction","tooltipTextFunction","onClickFunction","hrefFunction","textLabelFunction","windowWidth","width","height","scale","setScale","translateX","setTranslateX","translateY","setTranslateY","containerRef","countryValueMap","Object","fromEntries","map","country","value","toUpperCase","minValue","Math","min","maxValue","max","projection","pathGenerator","onClick","useCallback","context","event","assign","regions","features","feature","triggerRef","I","isoCode","N","countryName","C","coordinates","geoFeature","type","properties","NAME","ISO_A2","geometry","countryCode","countryValue","prefix","suffix","path","createElement","ref","d","style","href","key","tooltip","undefined","highlightedTooltip","regionPaths","entry","regionTooltips","eventHandlers","onMouseDown","e","preventDefault","stopPropagation","onDoubleClick","rect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","className","transform","transition","labelProps","label"],"mappings":"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","sourcesContent":["import React, { useState, createRef } from \"react\";\nimport { geoMercator, geoPath } from \"d3-geo\";\nimport geoData from \"./countries.geo\";\nimport { defaultColor, defaultSize, heightRatio, defaultCountryStyle, defaultTooltip, } from \"./constants\";\nimport { useWindowWidth, responsify } from \"./utils\";\nimport { drawTooltip } from \"./draw\";\nimport Frame from \"./components/Frame\";\nimport Region from \"./components/Region\";\nimport TextLabel from \"./components/TextLabel\";\nexport default function WorldMap(props) {\n    const { data, title, valuePrefix = \"\", valueSuffix = \"\", color = defaultColor, strokeOpacity = 0.2, backgroundColor = \"white\", tooltipBgColor = \"black\", tooltipTextColor = \"white\", size = defaultSize, frame = false, frameColor = \"black\", borderColor = \"black\", richInteraction = false, styleFunction = defaultCountryStyle(borderColor, strokeOpacity), tooltipTextFunction = defaultTooltip, onClickFunction, hrefFunction, textLabelFunction = () => [], } = props;\n    const windowWidth = useWindowWidth();\n    const width = typeof size === \"number\" ? size : responsify(size, windowWidth);\n    const height = width * heightRatio;\n    const [scale, setScale] = useState(1);\n    const [translateX, setTranslateX] = useState(0);\n    const [translateY, setTranslateY] = useState(0);\n    const containerRef = createRef();\n    const countryValueMap = Object.fromEntries(data.map(({ country, value }) => [country.toUpperCase(), value]));\n    const minValue = Math.min(...data.map(({ value }) => value));\n    const maxValue = Math.max(...data.map(({ value }) => value));\n    const projection = geoMercator();\n    const pathGenerator = geoPath().projection(projection);\n    const onClick = React.useCallback((context) => (event) => onClickFunction === null || onClickFunction === void 0 ? void 0 : onClickFunction(Object.assign(Object.assign({}, context), { event })), [onClickFunction]);\n    const regions = geoData.features.map((feature) => {\n        const triggerRef = createRef();\n        const { I: isoCode, N: countryName, C: coordinates } = feature;\n        const geoFeature = {\n            type: \"Feature\",\n            properties: { NAME: countryName, ISO_A2: isoCode },\n            geometry: {\n                type: \"MultiPolygon\",\n                coordinates: coordinates,\n            },\n        };\n        const context = {\n            countryCode: isoCode,\n            countryValue: countryValueMap[isoCode],\n            countryName,\n            color,\n            minValue,\n            maxValue,\n            prefix: valuePrefix,\n            suffix: valueSuffix,\n        };\n        const path = (React.createElement(Region, { ref: triggerRef, d: pathGenerator(geoFeature), style: styleFunction(context), onClick: onClick(context), strokeOpacity: strokeOpacity, href: hrefFunction === null || hrefFunction === void 0 ? void 0 : hrefFunction(context), key: countryName }));\n        const tooltip = drawTooltip(typeof context.countryValue === \"undefined\"\n            ? undefined\n            : tooltipTextFunction(context), tooltipBgColor, tooltipTextColor, triggerRef, containerRef);\n        return { path, highlightedTooltip: tooltip };\n    });\n    const regionPaths = regions.map((entry) => entry.path);\n    const regionTooltips = regions.map((entry) => entry.highlightedTooltip);\n    const eventHandlers = {\n        onMouseDown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n        },\n        onDoubleClick(e) {\n            const rect = e.currentTarget.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            if (scale === 4) {\n                setTranslateX(0);\n                setTranslateY(0);\n                setScale(1);\n            }\n            else {\n                setTranslateX(2 * translateX - x);\n                setTranslateY(2 * translateY - y);\n                setScale(scale * 2);\n            }\n        },\n    };\n    return (React.createElement(\"figure\", { className: \"worldmap__figure-container\", style: { backgroundColor } },\n        title && (React.createElement(\"figcaption\", { className: \"worldmap__figure-caption\" }, title)),\n        React.createElement(\"svg\", Object.assign({ ref: containerRef, height: `${height}px`, width: `${width}px` }, (richInteraction ? eventHandlers : undefined)),\n            frame && React.createElement(Frame, { color: frameColor }),\n            React.createElement(\"g\", { transform: `translate(${translateX}, ${translateY}) scale(${(width / 960) * scale}) translate(0, 240)`, style: { transition: \"all 0.2s\" } }, regionPaths),\n            React.createElement(\"g\", null, textLabelFunction(width).map((labelProps) => (React.createElement(TextLabel, Object.assign({}, labelProps, { key: labelProps.label }))))),\n            regionTooltips)));\n}\nexport { WorldMap };\n"]},"metadata":{},"sourceType":"module"}